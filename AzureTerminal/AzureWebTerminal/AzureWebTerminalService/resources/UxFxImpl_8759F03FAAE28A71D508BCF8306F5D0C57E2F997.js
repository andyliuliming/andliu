var MsPortalImpl;(function(n){var t;(function(t){"use strict";var f=window,e=f.fx.environment.isDevelopmentMode,
r,i,u;if(t.messageBoxAbortRetryIgnoreButtons="<div> <button value='abort'>Abort<\/button> <button value='retry'>Retry<\/button> <button value='ignore'>Ignore<\/button> <\/div>",
t.messageBoxOkButton="<div> <button value='ok'>Ok<\/button> <\/div>",t.messageBoxOkCancelButtons="<div> <button value='ok'>Ok<\/button> <button value='cancel'>Cancel<\/button> <\/div>",
t.messageBoxRetryCancelButtons="<div> <button value='retry'>Retry<\/button> <button value='cancel'>Cancel<\/button> <\/div>",
t.messageBoxYesNoButtons="<div> <button value='yes'>Yes<\/button> <button value='no'>No<\/button> <\/div>",
t.messageBoxYesNoCancelButtons="<div> <button value='yes'>Yes<\/button> <button value='no'>No<\/button> <button value='cancel'>Cancel<\/button> <\/div>",
t.part='<header class="fxs-part-title" data-bind="visible: container.partTitle"> <h2 data-bind="text: container.partTitle" class="msportalfx-tooltip-overflow"><\/h2> <h3 data-bind="visible: !context.inContainerOfSameAsset(), text: container.assetName" class="msportalfx-tooltip-overflow"><\/h3> <\/header> <section class="fxs-part-content"><\/section> <!-- ko if: context.isUiBlocked --> <div class="fxs-part-blockui-shield"><\/div> <div class="fxs-part-nodatamessage" data-bind="visible: container.noDataMessage"> <!--The extra nested div is to enable vertical centering--> <div data-bind="text: container.noDataMessage" class="fxs-part-nodatamessage-text msportalfx-tooltip-overflow fxs-bg-overlay-dark fxs-text-white"><\/div> <\/div> <div class="fxs-part-noaccessmessage" data-bind="visible: container.unauthorizedMessage, css: { \'fxs-part-noaccessmessage-withtitle\': container.partTitle }"> <!--The extra nested div is to enable vertical centering--> <header class="fxs-part-title" data-bind="visible: container.partTitle"> <h2 data-bind="text: container.partTitle" class="msportalfx-tooltip-overflow"><\/h2> <h3 data-bind="visible: !context.inContainerOfSameAsset(), text: container.assetName" class="msportalfx-tooltip-overflow"><\/h3> <\/header> <div data-bind="text: container.unauthorizedMessage" class="fxs-part-noaccessmessage-text msportalfx-tooltip-overflow fxs-bg-overlay-dark fxs-text-white"><\/div> <div data-bind="text: container.unauthorizedMessage" class="fxs-part-noaccessmessage-textsmall msportalfx-tooltip-overflow"><\/div> <\/div> <!-- /ko --> <svg class="fxs-part-svg" focusable="false"> <rect class="fxs-part-svg-rect" x="0" y="0" width="100%" height="100%"/> <\/svg> ',
t.partError="<div class='fxs-part-error-content'> <img class='fxs-part-error-icon' data-bind='attr: { src: data.uri.icon, title: title, alt: title}'/> <div class='fxs-part-error-text'> <div class='fxs-part-error-title' data-bind='text: title'><\/div> <div class='fxs-part-error-subtitle' data-bind='text: subtitle'><\/div> <\/div> <\/div> ",
t.widgetsAvatarMenu='<a href="" class="fxs-avatarmenu-header"> <img data-bind="attr: { src: avatarUri }" alt=""/> <div class="fxs-avatarmenu-username" data-bind="text: displayName"><\/div> <div class ="fxs-avatarmenu-tenant" data-bind="text: currentTenantDisplayName"><\/div> <\/a> <div class="fxs-avatarmenu-dropdown"> <ul class="fxs-avatarmenu-list-system"> <li class="fx-has-hover fx-bg-shade-50"> <a href="" class="fxs-avatarmenu-signout"> <span data-bind="text:text.signOutLabel"><\/span> <span class="fxs-avatarmenu-icon fx-fill-invalid" data-bind="image: MsPortalFx.Base.Images.Signout()"><\/span> <\/a> <\/li> <\/ul> <div class="fxs-avatarmenu-scrollviewer"> <div class="fxs-avatarmenu-list-tenant" data-bind="if: listOfTenants().length"> <div class="fxs-avatarmenu-dropdown-title" data-bind="text: text.tenant"><\/div> <ul data-bind="foreach: listOfTenants"> <li class="fx-has-hover fx-bg-shade-50"> <a data-bind="css: { \'fxs-avatarmenu-current-tenant fx-bg-shade-60\': $index() === 0 }, attr: { href: $index() === 0 ? \'#\' : \'\' }"> <div data-bind="text: displayName"><\/div> <div data-bind="text: domainName" class="fxs-avatarmenu-tenant-uri"><\/div> <\/a> <\/li> <\/ul> <\/div> <div class="fxs-avatarmenu-list-system"> <ul> <li class="fx-has-hover fx-bg-shade-50"> <a href="" class="fxs-avatarmenu-settings" > <span data-bind="text: text.openSettingsBlade" ><\/span> <span class="fxs-avatarmenu-icon" data-bind="image: MsPortalFx.Base.Images.Gear(MsPortalFx.Base.ImagePalette.White)"><\/span> <\/a> <\/li> <li class="fx-has-hover fx-bg-shade-50"> <a href="" class="fxs-avatarmenu-organize" data-bind="text: text.enterOrganizeMode"><\/a> <\/li> <\/ul> <ul> <li class="fx-has-hover fx-bg-shade-50"> <a href="https://go.microsoft.com/fwlink/?LinkID=522330" class="fxs-avatarmenu-legal" target="_blank" data-bind="text:text.legalLabel"><\/a> <\/li> <\/ul> <ul> <li class="fx-has-hover fx-bg-shade-50"> <a href="https://go.microsoft.com/fwlink/?LinkID=522329" class="fxs-avatarmenu-feedback" target="_blank"> <span data-bind="text:text.feedbackLabel"><\/span> <span class="fxs-avatarmenu-icon" data-bind="image: MsPortalFx.Base.Images.Feedback()"><\/span> <\/a> <\/li> <li class="fx-has-hover fx-bg-shade-50"> <a href="" class="fxs-avatarmenu-support" > <span data-bind="text: text.supportLabel" ><\/span> <\/a> <\/li> <\/ul> <ul> <li class="fx-has-hover fx-bg-shade-50"> <a href="https://go.microsoft.com/fwlink/?LinkID=522337" class="fxs-avatarmenu-switchportal" target="_blank"> <span data-bind="text:text.switchPortalLabel"><\/span> <span class="fxs-avatarmenu-icon" data-bind="image: MsPortalFx.Base.Images.LaunchCurrent()"><\/span> <\/a> <\/li> <\/ul> <div> <div> <\/div>',
t.widgetsBlade='<header class="fxs-blade-header fxs-header fx-bg-shade-50 fx-brdr-shade-55" data-bind="css: { \'fxs-blade-disabled\': data.disabled, \'fxs-blade-header-hideCommandBarLabels\': !data.showCommandBarLabels(), \'fxs-blade-title-image-visible\': func._shouldShowTitleImage }, attr: { tabindex: data.displayState() === MsPortalFx.Blades.DisplayState.Minimized ? 0 : null }"> <div class="fxs-blade-statusbar-wrapper fx-bg-shade-60 fx-text-white"> <div class="fxs-blade-statusbar msportalfx-tooltip-overflow" data-bind="css: { \'fxs-blade-contentstate-success fxs-bg-success fxs-bg-hover-success\': data.contentState() === MsPortalFx.ViewModels.ContentState.Success, \'fxs-blade-contentstate-warning fxs-bg-warning fxs-bg-hover-warning\': data.contentState() === MsPortalFx.ViewModels.ContentState.Warning, \'fxs-blade-contentstate-error fxs-bg-error fxs-bg-hover-error\': data.contentState() === MsPortalFx.ViewModels.ContentState.Error, \'fxs-blade-contentstate-dirty fxs-bg-dirty fxs-bg-hover-dirty\': data.contentState() === MsPortalFx.ViewModels.ContentState.Dirty, \'fxs-blade-contentstate-info fxs-bg-info fxs-bg-hover-info\': data.contentState() === MsPortalFx.ViewModels.ContentState.Info }"> <!-- ko ifnot: data.loaded --> <div class="fxs-blade-statusbar-text fxs-blade-loading-status" data-bind="text: data.text.loading"><\/div> <!-- /ko --> <!-- ko if: data.statusBar.activatable --> <button type="button" class="fxs-blade-statusbar-text-button fx-text-white" data-bind="text: data.contentStateDisplayText, visible: data.loaded, attr: { title: data.contentStateDisplayText }"><\/button> <!-- /ko --> <!-- ko ifnot: data.statusBar.activatable --> <div class="fxs-blade-statusbar-text" data-bind="text: data.contentStateDisplayText, visible: data.loaded, attr: { title: data.contentStateDisplayText }"><\/div> <!-- /ko --> <div class="fxs-blade-actions" data-bind="visible: data.loaded"> <button type="button" class="fxs-blade-button-bladeactions" data-bind="enable: data.actionsButtonEnabled, visible: data.actionsButtonEnabled, attr: { title: data.text.actions }, image: MsPortalFx.Base.Images.Shell.HeaderDots()"><\/button> <button type="button" class="fxs-blade-pin" data-bind="enable: data.pinActionEnabled, visible: data.pinActionEnabled, attr: { title: data.text.pin }, image: MsPortalFx.Base.Images.Pin()"><\/button> <button type="button" class="fxs-blade-minimize" data-bind="enable: data.minimizeEnabled, visible: data.minimizeEnabled, attr: { title: data.text.minimize }, image: MsPortalFx.Base.Images.Shell.Minimize()"><\/button> <button type="button" class="fxs-blade-maximizeOrRestore" data-bind="enable: data.maximizeOrRestoreEnabled, visible: data.maximizeOrRestoreEnabled, attr: { title: (data.displayState() === MsPortalFx.Blades.DisplayState.Normal ? data.text.maximize : data.text.restore ) }, image: (data.displayState() === MsPortalFx.Blades.DisplayState.Normal ? MsPortalFx.Base.Images.Shell.Maximize() : MsPortalFx.Base.Images.Shell.Restore())"><\/button> <button type="button" class="fxs-blade-close" data-bind="attr: { title: data.text.close }, image: MsPortalFx.Base.Images.Shell.Close()"><\/button> <\/div> <\/div> <\/div> <!-- ko if: func._shouldShowTitleImage --> <img class="fxs-blade-title-image" data-bind="attr: { src: data.titleImageUri }" alt=""/> <!-- /ko --> <div class="fxs-blade-title-content"> <div class="fxs-blade-title-text-container"> <div class="fxs-blade-title" data-bind="css: {\'fxs-blade-header-icon\': data.showBladeIcon}"> <!-- ko if: data.showBladeIcon --> <span class="fxs-blade-header-icon-holder" data-bind="image: data.icon"/> <!-- /ko --> <div class="fxs-blade-hgroup"> <h2 class="fxs-blade-title-titleText fx-text-white msportalfx-tooltip-overflow" data-bind="text: data.title"><\/h2> <h3 class="fx-text-title msportalfx-tooltip-overflow"> <span data-bind="text: data.subtitle"/> <span data-bind="visible: func._showingSubtitleAndPreviewTag"> - <\/span> <span data-bind="pcPreviewTag: data.previewTag"/> <\/h3> <\/div> <\/div> <\/div> <!-- ko if: func._shouldShowDescription --> <p class="fxs-blade-title-description fx-text-white"> <span data-bind="text: data.description" class="msportalfx-tooltip-overflow"><\/span> <a class="fxs-blade-title-help-link" data-bind="attr: { href: data.helpUri }, visible: data.helpUri && $.trim(data.helpUri()).length > 0" target="_blank"> <span data-bind="text: data.text.helpText"><\/span><span class="fxs-blade-title-help-icon" data-bind="image: MsPortalFx.Base.Images.Hyperlink()"><\/span> <\/a> <\/p> <!-- /ko --> <div data-bind="stopBindings: true" class="fxs-blade-commandBarContainer"> <div class="fxs-commandBar"><\/div> <\/div> <\/div> <\/header> <div class="fxs-blade-dialoghost fx-bg-shade-60 fx-text-white" data-bind="stopBindings: true"> <div class="fxs-blade-dialog"><\/div> <\/div> <div class="fxs-blade-summary-container"> <\/div> <div tabindex="0" class="fxs-blade-content fxs-pannable fxs-scrollbar-transparent fxs-scrollbar-default-hover"> <!--ko ifnot: (data.disabled() || data.unauthorizedNoticeVm()) --> <div class="fxs-blade-stacklayout" data-bind="stopBindings: true"><\/div> <!-- /ko --> <!--ko if: data.disabled --> <div class="fxs-blade-disabled-message"> <div data-bind="image: MsPortalFx.Base.Images.Delete()"><\/div> <h2 data-bind="text: data.disabledMessageTitle"><\/h2> <h3 data-bind="text: data.disabledMessageSubtitle"><\/h3> <\/div> <!-- /ko --> <!-- ko if: (data.unauthorizedNoticeVm() && !data.disabled()) --> <div data-bind="pcNotice: data.unauthorizedNoticeVm"><\/div> <!-- /ko --> <\/div> <div class="fxs-blade-actionBar"><\/div> <!-- ko if: !data.loaded() --> <div class="fxs-blade-progress fxs-bg-muted-10"> <div class="fxs-blade-progress-dots"> <span class="fxs-blade-progress-dots-one"><\/span> <span class="fxs-blade-progress-dots-two"><\/span> <span class="fxs-blade-progress-dots-three"><\/span> <\/div> <\/div> <!-- /ko -->',
t.widgetsCommandBar="<ul class=\"fxs-commandBar-itemList\" data-bind=\"css: { 'fxs-commandBar-itemList-expanded': data.showMoreCommands, 'fxs-commandBar-itemList-hideLabels': !data.showCommandBarLabels(), 'fxs-commandBar-itemList-canExpand': data.showEllipsisCommand }\"> <!-- ko template: { name: 'fxCommandBarItemTemplate', foreach: data.topMenuItems(), as: 'command' } --> <!-- /ko --> <!-- ko if: data.showEllipsisCommand --> <li class=\"fxs-commandBar-item-expandListContainer\"> <a class=\"fxs-commandBar-item fxs-commandBar-item-expandList\" href=\"\" data-bind=\"click: func._ellipsisCommandHandler, attr: { title: data.ellipsisCommandText }\"><\/a> <\/li> <!-- /ko --> <!-- ko if: data.showMoreCommands --> <!-- ko template: { name: 'fxCommandBarItemTemplate', foreach: data.remainingMenuItems(), as: 'command' } --> <!-- /ko --> <!-- /ko --> <\/ul>",
t.widgetsCommandBarItem='<li class="fxs-br-muted" data-bind="css: { \'fxs-commandbar-item-opendialog\': $data.hasOpenDialog }"> <a class="fxs-commandBar-item fx-bg-shade-50" data-bind="css: { \'fx-bg-shade-60\': pressed() || ($data.hasOpenDialog && $data.hasOpenDialog()) || ($data.checked && $data.checked()), \'fxs-commandbar-item-checked\': $data.checked, \'fxs-commandBar-itemDisabled\': !enabled(), \'fx-has-hover\': enabled(), \'fxs-commandBar-itemPressed\': pressed }, attr: { href: enabled() ? \'\' : null, title: text()}"> <div class="fxs-commandBar-item-icon fx-fill-white" data-bind="image: icon"><\/div> <div class="fxs-commandBar-item-text fx-text-white msportalfx-tooltip-overflow" data-bind="text: text()"><\/div> <!-- ko if: ko.utils.unwrapObservable($data.hasPopup) && ko.utils.unwrapObservable($data.hasOpenDialog) --> <div class="fxs-commandbar-listpopuptriangle fxs-triangle"><\/div> <!-- /ko --> <\/a> <!-- ko if: $data.hasPopup --> <div class="fxs-commandbar-listpopup"><\/div> <!-- /ko --> <\/li>',
t.widgetsContextMenu="<ul class=\"fxs-contextMenu-commandItemsList\" data-bind=\"css: { 'fxs-contextMenu-commandItemsList-populated': data.orderedMenuItemsCommands().length }, template: { name: 'fxContextMenuItemTemplate', foreach: data.orderedMenuItemsCommands, afterRender: afterRender }\"> <\/ul> <ul class=\"fxs-contextMenu-itemList\" data-bind=\"css: { 'fxs-contextMenu-itemList-populated': data.orderedMenuItems().length }, template: { name: 'fxContextMenuItemTemplate', foreach: data.orderedMenuItems, afterRender: afterRender }\"> <\/ul>",
t.widgetsContextMenuItem='<li class="fxs-contextMenu-item" data-bind="css: { \'fxs-contextMenu-itemDisabled\': !enabled()}"> <a data-bind="attr: { href: enabled() ? \'#\' : null }"> <div class="fxs-contextMenu-icon" data-bind="image: icon"><\/div> <div class="msportalfx-text-ellipsis" data-bind="text: text()"><\/div> <\/a> <\/li>',
t.widgetsDebugHub='<div class="fxs-debughub-tabselector" data-bind="formElement: data.tabs"><\/div> <div class="fxs-debughub-addpartform msportalfx-form msportalfx-form-regular"> <div class="msportalfx-form-section" data-bind="visible: data.addPart.visible"> <div class="fxs-debughub-addpartform-extensionname" data-bind="formElement: data.addPart.extensionName"><\/div> <div class="fxs-debughub-addpartform-parttypename" data-bind="formElement: data.addPart.partTypeName"><\/div> <div class="fxs-debughub-addpartform-modeljson" data-bind="formElement: data.addPart.modelJson"><\/div> <button class="fxs-debughub-addpartbutton" data-bind="text: data.addPart.addPartButtonText, pcButton: data.addPart.addPartButton"><\/button> <\/div> <\/div> <div class="fxs-debughub-extensions" data-bind="visible: data.extensions.visible"> <div data-bind="text: data.extensions.openExtensionsPopupButtonText, pcButton: data.extensions.openExtensionsPopupButton"><\/div> <div data-bind="pcGrid: func._extensionsGrid"><\/div> <\/div> <div class=\'fxs-debughub-telemetryevents\' data-bind=\'visible: data.telemetryEvents.visible\'> <div data-bind=\'formElement: data.telemetryEvents.logToConsole\'><\/div> <div class=\'fxs-debughub-perfevents\' data-bind=\'pcGrid: func._telemetryEventsGrid\'/> <\/div> ',
t.widgetsLens='<div class="fxs-lens-drag-handle"><\/div> <div class="fxs-lens-title-container"> <h2 class="fxs-lens-title" data-bind=\'text: data.title\'><\/h2> <input type="text" class="fxs-lens-input-title azc-input" data-bind="textInput: data.title" maxlength="250"/> <div class="fxs-lens-title-spacer"><\/div> <div class="fxs-lens-title-hr fxs-br-muted"><\/div> <button class="fxs-lens-button-collapse" data-bind=\'attr: { title: func._collapseButtonText }, image: func._collapseButtonImage\'><\/button> <button class="fxs-lens-button-addparts" data-bind=\'attr: { title: data.text.addParts }, image: MsPortalFx.Base.Images.Add()\'><\/button> <button class="fxs-lens-button-remove" data-bind=\'attr: { title: data.text.remove }, image: func._closeButtonImage\'><\/button> <button class="fxs-stacklayout-child-move-next" data-bind=\'attr: { title: data.text.moveDown }, image: func._moveNextButtonImage\'><\/button> <button class="fxs-stacklayout-child-move-previous" data-bind=\'attr: { title: data.text.moveUp }, image: func._movePreviousButtonImage\'><\/button> <\/div> <div class="fxs-lens-layout"><\/div>',
t.widgetsPanorama='<div class="fxs-panorama-homearea"> <div class="fxs-panorama-previewbadge"><\/div> <h1 class="fxs-panorama-title fxs-pannable"><\/h1> <div class="fxs-avatarmenu-positioncontainer"> <div class="fxs-avatarmenu-target"><\/div> <\/div> <div class="fxs-startboard-target fxs-scrollbar-transparent fxs-scrollbar-default-hover"><\/div> <\/div> <div class="fxs-journey-target"><\/div>',
t.widgetsPartGallery='<!-- ko if: data.loading --> <div class="fxs-partgallery-loading-status fx-bg-shade-60 fx-text-white" data-bind="text: data.text.loading"><\/div> <!-- /ko --> <div class="fxs-partgallery-topcontainer" data-bind="css: data.getStatusCssClass()"> <h1 class="fxs-partgallery-title" data-bind="text: data.text.title"><\/h1> <label class="fxs-partgallery-resourceslabel" data-bind="text: data.text.resourceLabel"><\/label> <div class="fxs-partgallery-resources" data-bind="formElement: data.resources"><\/div> <ul class="fxs-partgallery-categories" data-bind="visible: data.categories().length > 1, foreach: { data: data.categories }"> <li><a class="fxs-partgallery-category" href="#" data-bind="text: name, attr: { title: name }, css: { \'fxs-partgallery-category-selected\': selected }"><\/a><\/li> <\/ul> <div class="fxs-partgallery-message" data-bind="visible: data.messageVisible"> <p class="fxs-partgallery-message-title" data-bind="text: data.messageTitle"><\/p> <p class="fxs-partgallery-message-subtitle" data-bind="text: data.messageSubtitle"><\/p> <\/div> <\/div> <div class="fxs-partgallery-partscontainer fxs-scrollbar-transparent fxs-scrollbar-default-hover" data-bind="css: data.getStatusCssClass()"> <ul class="fxs-partgallery-parts" data-bind="foreach: data.parts"> <li> <div class="fxs-partgallery-part"> <div class="fxs-partgallery-part-thumbnail msportalfx-svg-palette-blue" data-bind="image: thumbnail, css: getThumbnailStretchCssClass()"><\/div> <div class="fxs-partgallery-part-name" data-bind="text: name, attr: { title: name }"><\/div> <\/div> <\/li> <\/ul> <\/div>',
t.widgetsPortal='<div class="fxs-portal-main"> <div class="fxs-portal-nav fxs-theme-context-nav"><\/div> <div class="fxs-portal-content fxs-scrollbar-transparent fxs-scrollbar-default-hover"><\/div> <\/div> <section class="fxs-portal-contextpane fxs-theme-context-menu"><\/section>',
t.widgetsTile='<div class="fxs-tile-overlay"><\/div> <div class="fxs-tile-progress fxs-bg-muted-10" data-bind="visible: data.loading"> <div class="fxs-tile-progress-dots"> <span class="fxs-tile-progress-dots-one"><\/span> <span class="fxs-tile-progress-dots-two"><\/span> <span class="fxs-tile-progress-dots-three"><\/span> <\/div> <\/div> <div data-bind="stopBindings: true"> <div class="fxs-tile-actions"><\/div> <\/div>',
t.widgetsHubPane="<div class='fxs-hubPane-inner' tabindex='0'> <div class='fxs-hubPane-title' data-bind='text: data.title'><\/div> <!-- ko if: data.failed || !data.content() --> <div class='fxs-hub-loading'> <!-- ko if: data.failed --> <img data-bind='attr: { src: data.uri.error }' alt=''/> <div data-bind='text: data.text.error'><\/div> <!-- /ko --> <!-- ko ifnot: !data.failed() && data.content --> <img data-bind='attr: { src: data.uri.loading }' alt=''/> <div data-bind='text: data.text.loading'><\/div> <!-- /ko --> <\/div> <!-- /ko --> <!-- ko if: !data.failed() && data.content --> <div class='fxs-hubPane-content'> <div class='fxs-hubPane-content-wrapper' data-bind='jqueryAppend: data.content'><\/div> <\/div> <!-- /ko --> <button type='button' class='fxs-hubPane-closeButton' data-bind='attr: { title: data.text.close }, image: MsPortalFx.Base.Images.Shell.Close()'><\/button> <\/div> ",
e){i=n.Templates;for(r in i)if(i.hasOwnProperty(r)&&(u=i[r],typeof u=="string"&&u.substr(0,2)==="~/"))
{f.alert("ERROR: Do not include MsPortalImplTemplates.ts as a reference. Use MsPortalImplTemplates.d.ts");
break}}})(t=n.Templates||(n.Templates={}))})(MsPortalImpl||(MsPortalImpl={})),function(n){var t;(function(
n){var t;(function(n){"use strict";function t(n){return n}var i,r,u,f,e,o,s,h,c,l,a,v,y,p,w,b,k;(function(
n){n.light=t("MsPortalImpl/Themes/Theme_Light.png");n.dark=t("MsPortalImpl/Themes/Theme_Dark.png");n.
blue=t("MsPortalImpl/Themes/Theme_Blue.png");n.azure=t("MsPortalImpl/Themes/Theme_Azure.png")})(i=n.
Theme||(n.Theme={})),function(n){n.wide=t("MsPortalImpl/RightClick/Resize_Wide.png");n.tall=t("MsPortalImpl/RightClick/Resize_Tall.png");
n.small=t("MsPortalImpl/RightClick/Resize_Small.png");n.normal=t("MsPortalImpl/RightClick/Resize_Normal.png");
n.mini=t("MsPortalImpl/RightClick/Resize_Mini.png");n.large=t("MsPortalImpl/RightClick/Resize_Large.png");
n.heroWide=t("MsPortalImpl/RightClick/Resize_HeroWide.png");n.heroTall=t("MsPortalImpl/RightClick/Resize_HeroTall.png");
n.hero=t("MsPortalImpl/RightClick/Resize_Hero.png")}(r=n.Resize||(n.Resize={}));n.openGraph=t("MsPortalImpl/Pinning/OpenGraph.png");
n.liveTile=t("MsPortalImpl/Pinning/LiveTile.png");n.appleTouch=t("MsPortalImpl/Pinning/AppleTouch.png"),
function(n){n.logo=t("MsPortalImpl/SplashScreen_logo.png")}(u=n.SplashScreen||(n.SplashScreen={})),function(
n){n.running=t("MsPortalImpl/ProvisioningPart_running.gif")}(f=n.ProvisioningPart||(n.ProvisioningPart=
{})),function(n){n.defaultBackground=t("MsPortalImpl/Portal_defaultBackground.png");n.background=t("MsPortalImpl/Portal_background.png")}
(e=n.Portal||(n.Portal={})),function(n){n.spinnerForHelp=t("MsPortalImpl/Part_spinnerForHelp.gif");n.
spinnerForContext=t("MsPortalImpl/Part_spinnerForContext.gif");n.spinner=t("MsPortalImpl/Part_spinner.gif")}
(o=n.Part||(n.Part={})),function(n){n.noPartsBackground=t("MsPortalImpl/PartGallery_noPartsBackground.png");
n.errorBackground=t("MsPortalImpl/PartGallery_errorBackground.png")}(s=n.PartGallery||(n.PartGallery=
{})),function(n){n.icon=t("MsPortalImpl/PartError_Icon.png")}(h=n.PartError||(n.PartError={})),function(
n){n.warningIcon=t("MsPortalImpl/NotificationHub_warningIcon.png");n.warningBadge=t("MsPortalImpl/NotificationHub_warningBadge.png");
n.successIcon=t("MsPortalImpl/NotificationHub_successIcon.png");n.notificationIcon=t("MsPortalImpl/NotificationHub_notificationIcon.png");
n.inProgressIcon=t("MsPortalImpl/NotificationHub_inProgressIcon.gif");n.inProgressBadge=t("MsPortalImpl/NotificationHub_inProgressBadge.gif");
n.infoIcon=t("MsPortalImpl/NotificationHub_infoIcon.png");n.errorIcon=t("MsPortalImpl/NotificationHub_errorIcon.png");
n.errorBadge=t("MsPortalImpl/NotificationHub_errorBadge.png");n.blankBadge=t("MsPortalImpl/NotificationHub_blankBadge.png");
n.bladeWarningIcon=t("MsPortalImpl/NotificationHub_bladeWarningIcon.png");n.bladeSuccessIcon=t("MsPortalImpl/NotificationHub_bladeSuccessIcon.png");
n.bladeInProgressIcon=t("MsPortalImpl/NotificationHub_bladeInProgressIcon.gif");n.bladeInfoIcon=t("MsPortalImpl/NotificationHub_bladeInfoIcon.png");
n.bladeErrorIcon=t("MsPortalImpl/NotificationHub_bladeErrorIcon.png")}(c=n.NotificationHub||(n.NotificationHub=
{})),function(n){n.unauthorized=t("MsPortalImpl/Notice_unauthorized.png");n.noSubscription=t("MsPortalImpl/Notice_noSubscription.png");
n.comingSoon=t("MsPortalImpl/Notice_comingSoon.png");n.background=t("MsPortalImpl/Notice_background.png");
n.actionIcon=t("MsPortalImpl/Notice_actionIcon.png")}(l=n.Notice||(n.Notice={})),function(n){n.noDataIcon=
t("MsPortalImpl/Hub_NoDataIcon.png");n.noData=t("MsPortalImpl/Hub_NoData.png");n.loading=t("MsPortalImpl/Hub_loading.gif");
n.city=t("MsPortalImpl/Hub_city.png")}(a=n.Hub||(n.Hub={})),function(n){n.close=t("MsPortalImpl/HubPane_close.png")}
(v=n.HubPane||(n.HubPane={})),function(n){n.gridShadow=t("MsPortalImpl/FlowLayout_gridShadow.png")}(
y=n.FlowLayout||(n.FlowLayout={})),function(n){n.loadingImage=t("MsPortalImpl/ControlsWizard_loadingImage.gif")}
(p=n.ControlsWizard||(n.ControlsWizard={})),function(n){n.loadingProgress=t("MsPortalImpl/Blade_loadingProgress.gif");
n.icon=t("MsPortalImpl/Blade_icon.gif")}(w=n.Blade||(n.Blade={})),function(n){n.noSubscriptions=t("MsPortalImpl/BillingHub_NoSubscriptions.png");
n.inProgressIcon=t("MsPortalImpl/BillingHub_inProgressIcon.gif")}(b=n.BillingHub||(n.BillingHub={})),
function(n){n.vcurrent=t("MsPortalImpl/AvatarMenu_vcurrent.png");n.signout=t("MsPortalImpl/AvatarMenu_signout.png");
n.orgIdAvatarSmall=t("MsPortalImpl/AvatarMenu_orgIdAvatarSmall.png");n.feedback=t("MsPortalImpl/AvatarMenu_feedback.png");
n.defaultAvatarSmall=t("MsPortalImpl/AvatarMenu_defaultAvatarSmall.png")}(k=n.AvatarMenu||(n.AvatarMenu=
{}))})(t=n.Images||(n.Images={}))})(t=n.Resources||(n.Resources={}))}(MsPortalImpl||(MsPortalImpl={})
)