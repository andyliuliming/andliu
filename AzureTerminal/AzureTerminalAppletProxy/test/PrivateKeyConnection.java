import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import org.junit.Test;

import ostc.sh.webconsole.OTermEnvironment;
import ostc.sh.webconsole.command.Actions;
import ostc.sh.webconsole.command.Command;
import ostc.sh.webconsole.command.CommandExecuter;

public class PrivateKeyConnection {

	@Test
	public void test() {
		try {
			FileInputStream fis = new FileInputStream(
					"C:\\Users\\andliu\\Desktop\\ssh_private_key");
			InputStreamReader isr = new InputStreamReader(fis);
			// int defaultCharBufferSize = 1024*8;
			// BufferedReader br = new
			// BufferedReader(isr,defaultCharBufferSize);
			BufferedReader br = new BufferedReader(isr);
			String data = null;
			StringBuilder sb = new StringBuilder();
			while ((data = br.readLine()) != null) {
				System.out.println(data);
				sb.append(data);
				sb.append("\n");
			}
			String privateKey = sb.toString();

			fis = new FileInputStream(
					"C:\\Users\\andliu\\Desktop\\ssh_private_key.pub");
			isr = new InputStreamReader(fis);
			// int defaultCharBufferSize = 1024*8;
			// BufferedReader br = new
			// BufferedReader(isr,defaultCharBufferSize);
			br = new BufferedReader(isr);
			// String data = null;
			sb = new StringBuilder();
			while ((data = br.readLine()) != null) {
				System.out.println(data);
				sb.append(data);
				sb.append("\n");
			}
			String publicKey = sb.toString();

			CommandExecuter commandExecuter = new CommandExecuter();
			Thread commandExecuterThread = new Thread(commandExecuter);
			commandExecuterThread.start();
			commandExecuter.getCommandQueue().add(
					new Command(Actions.SetHostName,
							"fareast-andliu.cloudapp.net"));
			commandExecuter.getCommandQueue().add(
					new Command(Actions.SetUserName, "azureuserr"));
			commandExecuter.getCommandQueue().add(
					new Command(Actions.SetPassword, ""));
			commandExecuter.getCommandQueue().add(
					new Command(Actions.SetPort, "23"));
			commandExecuter.getCommandQueue().add(
					new Command(Actions.SetPrivateKey, privateKey));
			// this.SetAction(Actions.SetPublicKey, publicKey);
			Thread.sleep(3000);
			OTermEnvironment.Instance().getSshConnection()
			.Connect();
		} catch (IOException e) {
			// TODO Autogenerated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
