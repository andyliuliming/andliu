using Macrodeek.StarDustModel.WrapUp;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeGen
{
    public class JavaConverter
    {
        public static String PKG_NAME = "com.startdust.buy.model";
        public static String COMMENT = "/**\n" +
                                       " * Autogenerated code.\n" +
                                       " * \n" +
                                       " * Author: Api de Baba \n" +
                                       " * Date: " + DateTime.UtcNow.ToString() + "\n" +         
                                       " */";


        public String GenJavaCode(Type type)
        {
            StringBuilder header = new StringBuilder();
            header.AppendLine(String.Format("package {0};", PKG_NAME));

            StringBuilder body = new StringBuilder();
            body.AppendLine("");
            body.AppendLine(COMMENT);
            body.AppendLine("");
            body.AppendLine(String.Format("public class {0} {{", type.Name));
            body.AppendLine("");

            foreach (var prop in type.GetProperties())
            {
                var javaPropName = GetJavaPropName(prop.Name);
                var javaType = GetJavaType(prop.PropertyType); 
                        
                body.AppendLine(String.Format("    private {0} {1};", javaType, javaPropName));
                body.AppendLine(String.Format("    public {0} get{1}() {{", javaType, prop.Name));
                body.AppendLine(String.Format("         return this.{0};", javaPropName));
                body.AppendLine(String.Format("    }}"));
                body.AppendLine(String.Format("    public void set{0}({1} {2}) {{", prop.Name, javaType, javaPropName));
                body.AppendLine(String.Format("         this.{0} = {1};", javaPropName, javaPropName));
                body.AppendLine(String.Format("    }}"));
                body.AppendLine("");
            }            
            body.AppendLine("}");

            return header.ToString() + body.ToString();
        }

        public static String GetJavaType(Type propType)
        {
            var javaType = "Unknown";
            if (propType.Equals(typeof(Int32)))
            {
                javaType = "int";
            }
            else if (propType.Equals(typeof(Int64)))
            {
                javaType = "long";
            }
            else if (propType.Equals(typeof(String)))
            {
                javaType = "String";
            }
            else if (propType.Equals(typeof(Double)))
            {
                javaType = "double";
            }
            else if (propType.Equals(typeof(float)))
            {
                javaType = "float";
            }
            else if (propType.Equals(typeof(Boolean)))
            {
                javaType = "boolean";
            }
            else if (propType.Equals(typeof(DateTime)))
            {
                javaType = "java.util.Date";
            }
            else if (propType.Equals(typeof(DateTimeOffset)))
            {
                javaType = "java.util.Date";
            }            
            else if (propType.Equals(typeof(Guid)))
            {
                javaType = "String";
            }
            else if (propType.IsEnum)
            {
                javaType = "String";
            }
            else if (propType.Equals(typeof(OrderPaymentStatus)) || 
                     propType.Equals(typeof(OrderStatus)) ||
                     propType.Equals(typeof(OrderPaymentStatus)))
            {
                //Convert C# enum to int
                javaType = "int";
            }
            else if (propType.Namespace.StartsWith("Macrodeek.StarDustModel"))
            {
                //Reference to another model
                javaType = String.Format("{0}",  propType.Name);
            }
            else if (typeof(IEnumerable).IsAssignableFrom(propType))
            {
                javaType = String.Format("java.util.List<{0}>", GetJavaType(propType.GetGenericArguments()[0]));
            }
            else if (propType.GetGenericTypeDefinition().Equals(typeof(Nullable<>)))
            {
                javaType = GetJavaType(propType.GetGenericArguments()[0]);
            }
            else
            {
                throw new NotImplementedException(String.Format("Unsupported type: {0}", propType));
            }
            return javaType;
        }

        public static String GetJavaPropName(String name)
        {
            if (String.IsNullOrEmpty(name))
            {
                return name;
            }
            return name;
            //return name.Substring(0, 1).ToLower() + name.Substring(1);
        }
    }
}
